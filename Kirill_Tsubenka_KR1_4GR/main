#include <iostream>
#include <vector>
#include <thread>
#include <mutex>
#include <chrono>
#include <sstream>
#include <string>

double accountBalance = 100.0;

std::mutex balanceMutex;

void changeBalance(const std::vector<double>& changes)
{
    for (double change : changes)
    {
        bool operationCompleted = false;
        int maxAttempts = 3;  // Максимальное количество попыток выполнить операцию

        while (!operationCompleted && maxAttempts > 0)
        {
            std::this_thread::sleep_for(std::chrono::milliseconds(50));  // Задержка на стороне счёта

            std::unique_lock<std::mutex> lock(balanceMutex);
            double previousBalance = accountBalance;
            double newBalance = previousBalance + change;

            if (newBalance >= 0)
            {
                accountBalance = newBalance;
                operationCompleted = true;

                std::stringstream notification;
                notification << "Было = " << previousBalance << ", операция " << (change >= 0 ? "+" : "-") << std::abs(change) << ", стало=" << newBalance;
                std::this_thread::sleep_for(std::chrono::milliseconds(50));  // Задержка для вывода уведомления
                std::cout << notification.str() << std::endl;
            }
            else
            {
                // Операция невозможна, пробуем выполнить её позже
                maxAttempts--;
                if (maxAttempts > 0)
                {
                    std::this_thread::sleep_for(std::chrono::milliseconds(50));  // Задержка перед повторной попыткой операции
                }
                else
                {
                    std::cout << "Не удалось выполнить операцию " << (change >= 0 ? "пополнения" : "снятия") << " на сумму " << std::abs(change) << ". Максимальное количество попыток исчерпано." << std::endl;
                }
            }
        }
    }
}

void checkBalance()
{
    std::lock_guard<std::mutex> lock(balanceMutex);
    std::cout << "Текущий баланс счёта: " << accountBalance << std::endl;
}

int main()
{
    setlocale(LC_ALL, "RUS");


    std::vector<double> scenario1 = { -120.0, 20.0, 30.0 };
    std::vector<double> scenario2 = { -400.0, -30.0, 90.0 };

    std::thread thread1(changeBalance, scenario1);
    std::thread thread2(changeBalance, scenario2);

    thread1.join();
    thread2.join();

    checkBalance();

    return 0;
}
